# -*- coding: utf-8 -*-

"""A wrapper around ROBOT functionality.

.. seealso:: https://robot.obolibrary.org
"""

import json
import os
import tempfile
from contextlib import contextmanager
from dataclasses import dataclass
from pathlib import Path
from subprocess import check_output
from typing import Literal, Union

from .struct.obograph import Graphs

__all__ = [
    "ParseResults",
    "robot_parse_json_local",
    "robot_parse_json_remote",
]


@dataclass
class ParseResults:
    """A dataclass containing an OBO Graph JSON and text output from ROBOT."""

    graphs: Graphs
    messages: list[str]


def robot_parse_json_local(
    path: Union[str, Path],
    *,
    json_path: Union[None, str, Path] = None,
) -> ParseResults:
    """Convert a local OWL/OBO file to an OBO Graph JSON object.

    :param path: The path to a local OWL or OBO file
    :param json_path: The optional path to store the intermediate
        OBO Graph JSON file generated by ROBOT. If not given, the
        OBO Graph JSON file will be put in a temporary directory
        and deleted after the function finishes.
    :returns: An object with the parsed OBO Graph JSON and text
        output from the ROBOT conversion program
    """
    return robot_parse_json(flag="-i", input_str=path, json_path=json_path)


def robot_parse_json_remote(
    iri: str,
    *,
    json_path: Union[None, str, Path] = None,
) -> ParseResults:
    """Convert a remote OWL/OBO file to an OBO Graph JSON object.

    :param iri: The IRI for a remote OWL or OBO file
    :param json_path: The optional path to store the intermediate
        OBO Graph JSON file generated by ROBOT. If not given, the
        OBO Graph JSON file will be put in a temporary directory
        and deleted after the function finishes.
    :returns: An object with the parsed OBO Graph JSON and text
        output from the ROBOT conversion program
    """
    return robot_parse_json(flag="-I", input_str=iri, json_path=json_path)


def robot_parse_json(
    *,
    flag: Literal["-i", "-I"],
    input_str: Union[str, Path],
    json_path: Union[None, str, Path] = None,
) -> ParseResults:
    """Convert a local OWL file to a JSON file.

    :param input_str: Either a local file path or IRI. If a local file path
        is used, pass ``"-i"`` to ``flag``. If an IRI is used, pass ``"-I"``
        to ``flag``.
    :param flag: The flag to denote if the file is local or remote
    :param json_path: The optional path to store the intermediate
        OBO Graph JSON file generated by ROBOT. If not given, the
        OBO Graph JSON file will be put in a temporary directory
        and deleted after the function finishes.
    :returns: An object with the parsed OBO Graph JSON and text
        output from the ROBOT conversion program
    """
    with _path_context(json_path) as path:
        args = ["robot", "convert", flag, str(input_str), "-o", str(path), "--format", "json"]
        ret = check_output(args, cwd=os.path.dirname(__file__))  # noqa:S603
        messages = ret.decode().strip().splitlines()
        graphs = json.loads(path.read_text())
        return ParseResults(graphs=graphs, messages=messages)


@contextmanager
def _path_context(path: Union[None, str, Path], name: str = "output.json"):
    if path is not None:
        yield Path(path).resolve()
    else:
        with tempfile.TemporaryDirectory() as directory:
            yield Path(directory).joinpath(name)
